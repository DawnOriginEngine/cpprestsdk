name: Quick Build Check

on:
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  # 快速构建检查 - 仅构建主要平台的Release版本
  quick-check:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: x64
            triplet: x64-windows
            name: "Windows x64"
          - os: ubuntu-latest
            platform: x64
            triplet: x64-linux
            name: "Linux x64"
    
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build pkg-config
    
    - name: Setup vcpkg
      run: |
        git submodule update --init vcpkg
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          .\vcpkg\bootstrap-vcpkg.bat
        else
          ./vcpkg/bootstrap-vcpkg.sh
        fi
      shell: bash
    
    - name: Install minimal dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg.exe install zlib openssl boost-system boost-thread boost-filesystem --triplet ${{ matrix.triplet }}
    
    - name: Install minimal dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ./vcpkg/vcpkg install zlib openssl boost-system boost-thread boost-filesystem --triplet ${{ matrix.triplet }}
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCPPREST_EXCLUDE_BROTLI=ON -DCPPREST_EXCLUDE_WEBSOCKETS=ON -DCPPREST_EXCLUDE_COMPRESSION=ON -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -A x64
    
    - name: Configure CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCPPREST_EXCLUDE_BROTLI=ON -DCPPREST_EXCLUDE_WEBSOCKETS=ON -DCPPREST_EXCLUDE_COMPRESSION=ON -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Check build artifacts
      shell: bash
      run: |
        echo "Checking build artifacts..."
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -la build/Release/Binaries/Release/ || ls -la build/Release/
        else
          ls -la build/Release/Binaries/ || ls -la build/
        fi
        echo "Build completed successfully!"