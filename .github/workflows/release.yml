name: Release Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v2.10.19'

jobs:
  build-and-package:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: x64
            triplet: x64-windows
            arch: x64
            cmake_arch: x64
          - os: windows-latest
            platform: arm64
            triplet: arm64-windows
            arch: arm64
            cmake_arch: ARM64
          - os: ubuntu-latest
            platform: x64
            triplet: x64-linux
            arch: x64
            cmake_arch: ""
          - os: ubuntu-latest
            platform: arm64
            triplet: arm64-linux
            arch: arm64
            cmake_arch: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Linux cross-compilation tools (ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.platform == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build pkg-config
    
    - name: Setup vcpkg
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          git submodule update --init vcpkg
          .\vcpkg\bootstrap-vcpkg.bat
        else
          git submodule update --init vcpkg
          ./vcpkg/bootstrap-vcpkg.sh
        fi
      shell: bash
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\vcpkg\vcpkg.exe install zlib openssl boost-locale boost-system boost-date-time boost-regex websocketpp boost-thread boost-filesystem boost-random boost-chrono boost-interprocess brotli --triplet ${{ matrix.triplet }}
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        ./vcpkg/vcpkg install zlib openssl boost-locale boost-system boost-date-time boost-regex websocketpp boost-thread boost-filesystem boost-random boost-chrono boost-interprocess brotli --triplet ${{ matrix.triplet }}
    
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCPPREST_EXCLUDE_BROTLI=OFF -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -DCMAKE_INSTALL_PREFIX=install -A ${{ matrix.cmake_arch }}
    
    - name: Configure CMake (Linux x64)
      if: matrix.os == 'ubuntu-latest' && matrix.platform == 'x64'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCPPREST_EXCLUDE_BROTLI=OFF -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -DCMAKE_INSTALL_PREFIX=install
    
    - name: Configure CMake (Linux ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.platform == 'arm64'
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCPPREST_EXCLUDE_BROTLI=OFF -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -DCMAKE_INSTALL_PREFIX=install -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Install
      run: cmake --install build --config Release
    
    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd install
        7z a ../cpprestsdk-${{ github.event.inputs.version || github.ref_name }}-windows-${{ matrix.arch }}.zip *
    
    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd install
        tar -czf ../cpprestsdk-${{ github.event.inputs.version || github.ref_name }}-linux-${{ matrix.arch }}.tar.gz *
    
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: cpprestsdk-windows-${{ matrix.arch }}
        path: cpprestsdk-*.zip
    
    - name: Upload Release Asset (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: cpprestsdk-linux-${{ matrix.arch }}
        path: cpprestsdk-*.tar.gz

  build-android:
    strategy:
      matrix:
        include:
          - abi: x86_64
            arch: x64
            triplet: x64-android
          - abi: arm64-v8a
            arch: arm64
            triplet: arm64-android
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: false
    
    - name: Set NDK environment
      run: echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build pkg-config
    
    - name: Setup vcpkg
      run: |
        git submodule update --init vcpkg
        ./vcpkg/bootstrap-vcpkg.sh
    
    - name: Install dependencies
      run: |
        ./vcpkg/vcpkg install zlib openssl boost-locale boost-system boost-date-time boost-regex websocketpp boost-thread boost-filesystem boost-random boost-chrono boost-interprocess --triplet ${{ matrix.triplet }}
    
    - name: Configure CMake
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${{ env.ANDROID_NDK_ROOT }}/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -DANDROID_PLATFORM=android-21 -DCPPREST_EXCLUDE_BROTLI=ON -DBUILD_TESTS=OFF -DBUILD_SAMPLES=OFF -DCMAKE_INSTALL_PREFIX=install
      env:
        ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
    
    - name: Build
      run: cmake --build build
    
    - name: Install
      run: cmake --install build
    
    - name: Package
      run: |
        cd install
        tar -czf ../cpprestsdk-${{ github.event.inputs.version || github.ref_name }}-android-${{ matrix.arch }}.tar.gz *
    
    - name: Upload Release Asset
      uses: actions/upload-artifact@v4
      with:
        name: cpprestsdk-android-${{ matrix.arch }}
        path: cpprestsdk-*.tar.gz